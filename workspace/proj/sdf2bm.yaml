pattern:
- name: source
  type: scan_sdf
  interface:
  - {name: output1,   class: oarg,  type: FIFO}
  - {name: st,    class: state, type: Int, value: '0'}
  - {name: obuff, class: var,   type: ArrayInt2}
  - {name: consumption, class: param, value: 0}
  - {name: production,  class: param, value: 2}
  instance:
  - placeholder: ns_func
    component: source_func
    bind:
    - {replace: 1_ret,   with: obuff}
    - {replace: 2_state, with: st}

- name: p1
  type: comb_sdf
  interface:
  - {name: input1,   class: iarg, type: FIFO}
  - {name: output1,  class: oarg, type: FIFO}
  - {name: ibuff, class: var, type: ArrayInt3}
  - {name: obuff, class: var, type: ArrayInt1}
  - {name: consumption, class: param, value: 3}
  - {name: production,  class: param, value: 1}
  instance:
  - placeholder: func
    component: dummy_func
    bind:
    - {replace: 2_arg, with: ibuff}
    - {replace: 1_ret, with: obuff}

- name: sink
  type: comb_sdf
  interface:
  - {name: input1, class: iarg, type: FIFO}
  - {name: ibuff, class: var, type: ArrayInt2}
  - {name: consumption, class: param, value: "2"}
  - {name: production,  class: param, value: 0}
  instance:
  - placeholder: func
    component: sink_func
    bind:
     - {replace: 1_arg, with: ibuff}

- name:  top_main
  type: std_seq_composite
  interface:
  - {name: s2p1, class: var, type: FIFO, constructor: mkFifo4}
  - {name: p12s, class: var, type: FIFO, constructor: mkFifo2}
  - {name: NUM_CYCLES, class: param, value: "99999999"}
  - {name: schedule, class: param, value: [A,A,B,A,B,C,sync]}
  instance:
  - placeholder: mkFifo4
    component: mkFifo_call
    inline: true
    bind:
    - {replace: size, withText: '4'}
    
  - placeholder: mkFifo2
    component: mkFifo_call
    inline: true
    bind:
    - {replace: size, withText: '2'}
    
  - placeholder: A
    component: source
    #call: inline   # NO INLINE!
    bind:
    - {replace: output1, with: s2p1}
    
  - placeholder: B
    component: p1
    #call: inline   # NO INLINE!
    bind:
    - {replace: input1, with: s2p1}
    - {replace: output1, with: p12s}
    
  - placeholder: C
    component: sink
    #call: inline   # NO INLINE!
    bind: {replace: input1, with: p12s}
    
  # - placeholder: sync
  #   component: wait
  #   bind: {replace: cycles, with: NUM_CYCLES}
  - placeholder: sync
    component: getchar


    
## Since SDF functions works on arrays, both input and output need to be specified
## as pointer arguments
## TODO: define and use ArrayInt instead
native:    
- name: source_func
  interface:
  - {name: 2_state, class: iarg, type: Int}
  - {name: 1_ret, class: oarg, type: Int}
  requirement: {include: "lib/funcs_sdf.c"}

- name: dummy_func
  interface:
  - {name: 2_arg, class: iarg, type: Int}
  - {name: 1_ret, class: oarg, type: Int}
  requirement: {include: "lib/funcs_sdf.c"}

- name: sink_func
  interface: {name: 1_arg, class: iarg, type: Int}
  requirement:
  - include: "stdio.h"
  - include: "lib/funcs_sdf.c"

