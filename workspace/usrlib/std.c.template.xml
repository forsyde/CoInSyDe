<?xml version="1.0" encoding="utf-8"?>
<library name="standard" contains="type" target="c">
    <!-- PROCESS CONSTRUCTOR TEMPLATES -->
    <template name="comb_sy">
	{{ placeholder("func") }}
    </template>
    <template name="scan_sy">
	{{ placeholder("ns_func") }}
    </template>
    <template name="moore_sy">
	{{ placeholder("ns_func") }}
	{{ placeholder("od_func") }}
    </template>
    <template name="comb_sdf">
	{% for i in range(int(consumption)) %}
	{{ ibuff.name }}[{{ i }}] = read({{ input1.name }});
	{% endfor %}
	{{ placeholder("func") }}
	{% for i in range(int(production)) %}
	write({{ output1.name }}, {{ obuff.name }}[{{ i }}]);
	{% endfor %}
    </template>
    <template name="scan_sdf">
	{% for i in range(int(consumption)) %}
	{{ ibuff.name }}[{{ i }}] = read({{ input1.name }});
	{% endfor %}
	{{ placeholder("ns_func") }}
	{% for i in range(int(production)) %}
	write({{ output1.name }}, {{ obuff.name }}[{{ i }}]);
	{% endfor %}
    </template>
    
    <!-- STANDARD SEQUENTIAL COMPOSITE PROCESS TEMPLATE -->
    <template name="std_seq_composite">
	while (1) {
        {% for inst in schedule %}
	{{ placeholder(inst) }}
	{% endfor %}
	}
	
	return 0;
    </template>
    
    <!-- USUAL FUNCTIONS -->
    <template name="+">
	{{ret.name}} = {{arg1.name}} + {{arg2.name}};
    </template>
    <template name="id">
	{{ret.name}} = {{arg.name}};
    </template>
</library>
